name: Sematext Synthetics CI/CD Integration
description: "Trigger Sematext Synthetics checks during your CI/CD workflows"
author: "Sematext"

inputs:
  MONITOR_GROUP_ID:
    description: "The ID of the monitor group to run the checks against (example: 42)"
    required: true
  REGION:
    description: "The region where your Sematext Cloud account is located ('EU' or 'US')"
    required: true
  SEMATEXT_API_KEY:
    description: "Your Sematext Cloud account's API key (visible in Settings -> API)"
    required: true
  TARGET_URL:
    description: "The URL to run the Synthetics check against (optional, will use the URL specified in the Sematext Cloud UI if not provided)"
    required: false
  GIT_COMMIT_HASH:
    description: "The commit hash that the Synthetics check will be triggered for (optional and used for repository dispatches which aren't directly linked to a commit, will use the commit hash of the current commit if not provided)"
    required: false

outputs:
  result:
    description: "The full result output from the Synthetics check"
    value: ${{ steps.poll_results.outputs.result }}
  status:
    description: "The status of the check (passed/failed)"
    value: ${{ steps.poll_results.outputs.status }}
  error:
    description: "The error message if the check failed"
    value: ${{ steps.poll_results.outputs.error }}

runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract commit details
      id: commit_info
      shell: bash
      run: |
        if [[ -n "${{ inputs.GIT_COMMIT_HASH }}" ]]; then
          echo "Using provided commit hash: ${{ inputs.GIT_COMMIT_HASH }}"
          COMMIT_HASH="${{ inputs.GIT_COMMIT_HASH }}"
        else
          echo "No GIT_COMMIT_HASH input provided, using the current commit hash on HEAD."
          COMMIT_HASH=$(git rev-parse HEAD)
        fi
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

        # Fetch all remote branches and identify the branch with this commit, if such a branch exists
        git fetch --all
        BRANCH_NAME=$(git branch --remote --contains $COMMIT_HASH | grep -oE 'origin/[^ ]+' | sed 's|origin/||' | head -n 1)
        if [[ -z "$BRANCH_NAME" ]]; then
            echo "Warning: Could not determine branch name for commit hash $COMMIT_HASH. This might happen if the hash was provided manually or is not on a remote branch."
            BRANCH_NAME="unknown" # Provide a default or handle as needed
        fi
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

    - name: Set Sematext base URL
      id: set_base_url
      shell: bash
      run: |
        if [[ "${{ env.REGION }}" == "EU" ]]; then
          #echo "BASE_URL=https://apps.eu.sematext.com/synthetics-api/api" >> $GITHUB_ENV
          # Adjusted for PR env, to test the feature
          echo "BASE_URL=https://pr-6156.apps.test.sematext.com/synthetics-api/api" >> $GITHUB_ENV
        elif [[ "${{ env.REGION }}" == "US" ]]; then
          echo "BASE_URL=https://apps.sematext.com/synthetics-api/api" >> $GITHUB_ENV
        else
          echo "Invalid region: '${{ env.REGION }}'. Region must be 'EU' or 'US'."
          exit 1
        fi

    - name: Trigger Sematext Synthetics Check
      id: trigger_check
      shell: bash
      run: |
        api_url="${{ env.BASE_URL }}/groups/${{ env.MONITOR_GROUP_ID }}/runs/github"
        deployment_url=${{ github.event.deployment_status.target_url }}
        if [[ -z "$deployment_url" || "$deployment_url" == "null" ]]; then
          if [[ -z "$TARGET_URL" ]]; then
            echo "Deployment URL not found. Running against URL specified in the Sematext Cloud UI."
          else
            echo "Running monitor for deployment URL: $TARGET_URL"
            deployment_url="$TARGET_URL"
          fi
        else
          echo "Running monitor for deployment URL: $deployment_url"
        fi

        payload=$(jq -n --arg hash "${{ env.COMMIT_HASH }}" --arg branch "${{ env.BRANCH_NAME }}" --arg url "$deployment_url" \
          '{commitHash: $hash, branch: $branch, url: $url}')

        response=$(curl -s -w "%{http_code}" -o response.json -X POST "$api_url" \
          -H "Content-Type: application/json" \
          -H "Authorization: apiKey ${{ env.SEMATEXT_API_KEY }}" \
          -d "$payload")

        http_code=$(tail -n1 <<< "$response")
        if [[ "$http_code" != "201" ]]; then
          echo "Failed to trigger Sematext check. HTTP status: $http_code"
          cat response.json
          exit 1
        fi

        echo "Check triggered successfully. Extracting run ID..."
        run_id=$(jq -r '.data.id' response.json)
        if [[ -z "$run_id" ]]; then
          echo "Failed to extract run ID from the response:"
          cat response.json
          exit 1
        fi

        echo "Run ID: $run_id"
        echo "run_id=$run_id" >> $GITHUB_ENV

    - name: Poll Sematext for Results
      id: poll_results
      shell: bash
      run: |
        poll_url="${{ env.BASE_URL }}/groups/${{ env.MONITOR_GROUP_ID }}/runs/${{ env.run_id }}/github"

        max_poll_duration=120   # Total allowed polling duration in seconds
        interval=10             # Wait time between poll attempts in seconds
        elapsed_time=0          # Counter for total polling time

        sleep 3                 # Initial wait to allow the run to start

        while [[ "$elapsed_time" -lt "$max_poll_duration" ]]; do
          echo -e " \nPolling Sematext... Elapsed time: ${elapsed_time}s"

          response=$(curl -s -w "%{http_code}" -o result.txt "$poll_url" \
            -H "Authorization: apiKey ${{ env.SEMATEXT_API_KEY }}")

          status_code=$(tail -n1 <<< "$response")

          if [[ "$status_code" == "200" ]]; then
            echo -e " \nRun completed. Result:"
            cat result.txt

            # Properly escape the result content for GitHub Actions output
            result_content=$(cat result.txt)
            echo "result<<EOF" >> $GITHUB_OUTPUT
            echo "$result_content" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            first_line=$(head -n 1 result.txt)
            if echo "$first_line" | grep -q "All monitors passed successfully."; then
              echo "Synthetics check passed."
              echo "status=passed" >> $GITHUB_OUTPUT
              echo "check_result=passed" >> $GITHUB_ENV
              exit 0
            else
              echo "Synthetics check failed."
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          elif [[ "$status_code" == "202" ]]; then
            cat result.txt     # Print the current status to see how many monitors are done
            echo "Retrying in ${interval}s..."
          else
            error="Unexpected status code when polling for results: $status_code"
            echo "$error"
            echo "error=$error" >> $GITHUB_OUTPUT
            echo "status=failed" >> $GITHUB_OUTPUT
            cat result.txt

            result_content=$(cat result.txt)
            echo "result<<EOF" >> $GITHUB_OUTPUT
            echo "$result_content" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            exit 1
          fi

          sleep $interval
          elapsed_time=$((elapsed_time + interval))
        done

        error="Polling for results timed out after ${max_poll_duration}s."
        echo "\n$error"
        echo "error=$error" >> $GITHUB_OUTPUT
        echo "status=failed" >> $GITHUB_OUTPUT

        result_content=$(cat result.txt)
        echo "result<<EOF" >> $GITHUB_OUTPUT
        echo "$result_content" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        exit 1
